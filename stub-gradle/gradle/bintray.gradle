import org._10ne.gradle.rest.RestTask

buildscript {
    apply from: "gradle/buildscript.gradle", to: buildscript
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.10ne.rest'

// hack: without it bintray property is not visible (???!)
logger.debug("$project.ext.bintray")
def bintrayCfg = project.ext.bintray

def bitrayApiUrl = "https://api.bintray.com"
bintrayCfg.signApiUrl = "$bitrayApiUrl/gpg/$bintrayCfg.user/$bintrayCfg.repo/$project.name/versions/$project.version"
bintrayCfg.publishApiUrl = "$bitrayApiUrl/content/$bintrayCfg.user/$bintrayCfg.repo/$project.name/$project.version/publish"

bintray {
    user = bintrayCfg.user
    key = bintrayCfg.key
    publications = ['mavenJava'] // see publications closure
    dryRun = bintrayCfg.dryRun
    publish = bintrayCfg.publish
    pkg { //package will be created if does not exist
        repo = bintrayCfg.repo
//            userOrg = 'myorg' // an optional organization name when the repo belongs to one of the user's orgs
        name = project.name
        desc = project.description
        websiteUrl = github.site
        issueTrackerUrl = github.tracker
        vcsUrl = github.scm
        licenses = [license]
        labels = bintrayCfg.tags
    }
}

// no way to do it from web ui and bintray plugin doesn't support it
// NOTE: files wil remain unpublished so go to bintray and publish them, after that do maven central sync (on web ui)
task bintraySignVersion(type: RestTask, description: 'Sign version files (auto sign bintray feature') {
    httpMethod = 'post'
    uri = bintray.signApiUrl
    username = bintray.user
    password = bintray.key
}
bintraySignVersion.doFirst {
    // cancel task in dry run mode
    if (bintray.dryRun) {
        logger.warn('Skipping version signing in dry run mode')
        throw new StopExecutionException()
    }
}

task bintraySign(type: RestTask, dependsOn: 'bintraySignVersion', description: 'Sign version files and publish sign files') {
    httpMethod = 'post'
    uri = bintray.publishApiUrl
    username = bintray.user
    password = bintray.key
}
bintraySign.doFirst {
    // cancel task in dry run mode
    if (bintray.dryRun) {
        logger.warn('Skipping version publishing in dry run mode')
        throw new StopExecutionException()
    }
}

bintraySign.mustRunAfter bintrayUpload